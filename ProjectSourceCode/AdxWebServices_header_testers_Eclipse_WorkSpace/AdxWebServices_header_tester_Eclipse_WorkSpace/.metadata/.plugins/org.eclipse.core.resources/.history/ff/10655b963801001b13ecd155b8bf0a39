package com.adonix.wsvc;

import com.adonix.wsvc.stubs.CAdxCallContext;
import com.adonix.wsvc.stubs.CAdxResultXml;
import com.adonix.wsvc.stubs.CAdxWebServiceXmlCCServiceLocator;
import com.adonix.wsvc.stubs.CAdxWebServiceXmlCC;

public class CServiceAdxObject extends CServiceAdx
{
	public static String URL_SUBPATH = "/services/CAdxWebServiceXmlCC";



	/**
	 * @param aActivityViewer
	 * @param aObjId
	 * @param aUrl
	 * @param aCtx
	 * @throws Exception
	 */
	public CServiceAdxObject(CActivityViewer aActivityViewer, String aObjId, String aUrl, CServiceAdxCallContext aCtx)
			throws Exception
	{
		super(aActivityViewer, aObjId, aUrl, aCtx);



		if (pActivityViewerOn)
			pActivityViewer.traceWrite("new CServiceAdxObject ok");
	}

	/**
	 * @param actionCode
	 * @param aObjectKeys
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execActionObject(String actionCode, CServiceAdxKeys aObjectKeys) throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execActionObject");

		CAdxResultXml wAdxResultXml = pService.actionObject(getAdxCallContext(), pObjId, actionCode, aObjectKeys
				.getAdxParamsKeys());

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param actionCode
	 * @param objectXml
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execActionObject(String actionCode, String objectXml) throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execActionObject");

		CAdxResultXml wAdxResultXml = pService.actionObject(getAdxCallContext(), pObjId, actionCode, objectXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param aObjectKeys
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execDelete(CServiceAdxKeys aObjectKeys) throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execDelete");

		CAdxResultXml wAdxResultXml = pService.delete(getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys());

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param aObjectKeys
	 * @param blocKey
	 * @param lineKey
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execDeleteLines(CServiceAdxKeys aObjectKeys, String blocKey, String[] lineKey)
			throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execInsertLines");

		CAdxResultXml wAdxResultXml = pService.deleteLines(getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys(),
				blocKey, lineKey);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execGetDescription() throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execGetDescription");

		CAdxResultXml wAdxResultXml = pService.getDescription(getAdxCallContext(), pObjId);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param aObjectKeys
	 * @param blocKey
	 * @param lineKey
	 * @param lineXml
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execInsertLines(CServiceAdxKeys aObjectKeys, String blocKey, String lineKey, String lineXml)
			throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execInsertLines");

		CAdxResultXml wAdxResultXml = pService.insertLines(getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys(),
				blocKey, lineKey, lineXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param aObjectKeys
	 * @param objectXml
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execModify(CServiceAdxKeys aObjectKeys, String objectXml) throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execModify");

		CAdxResultXml wAdxResultXml = pService.modify(getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys(),
				objectXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param aObjectKeys
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execRead(CServiceAdxKeys aObjectKeys) throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execRead");

		CAdxResultXml wAdxResultXml = pService.read(getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys());

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @param objectXml
	 * @return
	 * @throws Exception
	 */
	public CServiceAdxResult execSave(String objectXml) throws Exception
	{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execSave");

		CAdxResultXml wAdxResultXml = pService.save(getAdxCallContext(), pObjId, objectXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	/**
	 * @return
	 */
	CAdxCallContext getAdxCallContext()
	{
		return pServiceAdxCallContext.getAdxCallContext();
	}
}
