package com.adonix.wsvc;

import com.adonix.wsvc.stubs.CAdxCallContext;
import com.adonix.wsvc.stubs.CAdxResultXml;
import com.adonix.wsvc.stubs.CAdxWebServiceXmlCCServiceLocator;
import com.adonix.wsvc.stubs.CAdxWebServiceXmlCC;

public class CServiceAdxObject extends CServiceAdx {
	public static String URL_SUBPATH = "/services/CAdxWebServiceXmlCC";

	private CAdxWebServiceXmlCC pService;

	private CServiceAdxCallContext pServiceAdxCallContext;

	private CAdxWebServiceXmlCCServiceLocator pServiceLocator;

	/**
	 * @param aActivityViewer
	 * @param aObjId
	 * @param aUrl
	 * @param aCtx
	 * @throws Exception
	 */
	public CServiceAdxObject(CActivityViewer aActivityViewer, String aObjId,
			String aUrl, CServiceAdxCallContext aCtx) throws Exception {

		super(aActivityViewer, aObjId, aUrl, aCtx);

		if (pActivityViewerOn) {
			pActivityViewer.traceWrite("CServiceAdxObject.<init>");
			pActivityViewer
					.traceWriteDescr("EndpointAddress", pEndpointAddress);
		}

		pServiceLocator = new CAdxWebServiceXmlCCServiceLocator();

		pServiceLocator.setCAdxWebServiceXmlCCEndpointAddress(aUrl);

		pService = pServiceLocator.getCAdxWebServiceXmlCC();

		if (pActivityViewerOn)
			pActivityViewer.traceWrite("new CServiceAdxObject ok");
	}

	public CServiceAdxResult execActionObject(String actionCode,
			CServiceAdxKeys aObjectKeys) throws Exception {
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execActionObject");

		CAdxResultXml wAdxResultXml = pService.actionObject(
				getAdxCallContext(), pObjId, actionCode, aObjectKeys
						.getAdxParamsKeys());

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execActionObject(String actionCode,
			String objectXml)throws Exception {
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execActionObject");

		CAdxResultXml wAdxResultXml = pService.actionObject(getAdxCallContext(),
				pObjId, actionCode, objectXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execDelete(CServiceAdxKeys aObjectKeys) throws Exception{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execDelete");

		CAdxResultXml wAdxResultXml = pService.delete(
				getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys());

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execDeleteLines(CServiceAdxKeys aObjectKeys,
			String blocKey, String[] lineKey) throws Exception{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execInsertLines");

		CAdxResultXml wAdxResultXml = pService.deleteLines(
				getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys(),
				blocKey, lineKey);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execGetDescription() throws Exception{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execGetDescription");

		CAdxResultXml wAdxResultXml = pService.getDescription(
				getAdxCallContext(), pObjId);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execInsertLines(CServiceAdxKeys aObjectKeys,
			String blocKey, String lineKey, String lineXml)throws Exception {
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execInsertLines");

		CAdxResultXml wAdxResultXml = pService.insertLines(
				getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys(),
				blocKey, lineKey, lineXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execModify(CServiceAdxKeys aObjectKeys,
			String objectXml) throws Exception{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execModify");

		CAdxResultXml wAdxResultXml = pService.modify(
				getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys(),
				objectXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execRead(CServiceAdxKeys aObjectKeys) throws Exception{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execRead");

		CAdxResultXml wAdxResultXml = pService.read(
				getAdxCallContext(), pObjId, aObjectKeys.getAdxParamsKeys());

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	public CServiceAdxResult execSave(String objectXml) throws Exception{
		if (pActivityViewerOn)
			pActivityViewer.traceBeginStep("execSave");

		CAdxResultXml wAdxResultXml = pService.save(
				getAdxCallContext(), pObjId, objectXml);

		if (pActivityViewerOn)
			pActivityViewer.traceEndStep();
		return new CServiceAdxResult(wAdxResultXml);
	}

	CAdxCallContext getAdxCallContext() {
		return pServiceAdxCallContext.getAdxCallContext();
	}
}
